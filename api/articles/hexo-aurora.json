{"title":"Hexo 博客搭建指南：Aurora 主题与 Cloudflare + GitHub Pages 部署","uid":"7c571cda647bd463004b1d6057d46f3c","slug":"hexo-aurora","date":"2025-07-17T16:00:00.000Z","updated":"2025-08-15T13:03:01.231Z","comments":true,"path":"api/articles/hexo-aurora.json","keywords":"blog, technology, programming","cover":"https://raw.githubusercontent.com/LingmaFuture/lingmafuture.github.io/refs/heads/main/images/4.png","content":"<p>Hexo 是一个基于 Node.js 的快速、高效的静态博客框架。通过 Hexo，我们可以使用 Markdown 编写文章，几秒钟内生成静态网页并部署到托管服务，如 GitHub Pages。本文将详细介绍 Hexo 的安装初始化、Aurora 主题的使用与定制、常用插件扩展的配置，以及如何将博客部署到 GitHub Pages 并结合 Cloudflare 做域名管理与 CDN 加速。最后，我们还将梳理整个方案涉及的主要技术栈，并结合 <strong>Aurora 主题 + GitHub Pages + Cloudflare</strong> 给出完整的实战示例教程。</p>\n<h2 id=\"Hexo-安装与初始化\"><a href=\"#Hexo-安装与初始化\" class=\"headerlink\" title=\"Hexo 安装与初始化\"></a>Hexo 安装与初始化</h2><p>要使用 Hexo，需先准备 Node.js 运行环境和 Git 版本控制工具。在安装 Node.js 和 Git 后，就可以通过 npm 安装 Hexo CLI 工具并初始化博客站点：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用 npm 全局安装 Hexo 命令行工具</span></span><br><span class=\"line\">npm install -g hexo-cli</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在当前文件夹初始化一个新的 Hexo 博客（如需在指定目录下创建，在命令后加文件夹名）</span></span><br><span class=\"line\">hexo init blog</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进入博客根目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> blog</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装依赖（第一次初始化后需安装本地依赖包）</span></span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<p>上述命令将创建博客所需的目录结构和文件。Hexo 项目根目录下包含 <code>source</code>（文章内容）、<code>themes</code>（主题）、<code>_config.yml</code>（站点配置）等文件夹。完成初始化后，可以新建一篇文章并在本地预览：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 新建一篇文章</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;我的第一篇博客&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成静态页面并启动本地服务器预览（默认监听 http://localhost:4000）</span></span><br><span class=\"line\">hexo clean &amp;&amp; hexo server</span><br></pre></td></tr></table></figure>\n\n<p><strong>提示：</strong> <code>hexo s</code> 是 <code>hexo server</code> 的简写，用于启动本地预览服务器，默认地址是 <a href=\"http://localhost:4000/\">http://localhost:4000/</a> 。启动预览后，可以实时查看修改效果（修改文章或主题后刷新页面即可生效）。若修改了站点的 <code>_config.yml</code> 配置，则需要重启服务器才能看到更新。<br>Hexo 常用命令如下：</p>\n<ul>\n<li><code>hexo new [文章标题]</code>：新建文章（会在 <code>source/_posts</code> 下生成 Markdown 文件，可选在标题有空格时用引号括起）。</li>\n<li><code>hexo generate</code> &#x2F; <code>hexo g</code>：生成静态页面到 <code>public</code> 文件夹。一般部署前会执行生成，如果使用 Hexo 部署命令可省略此步。</li>\n<li><code>hexo server</code> &#x2F; <code>hexo s</code>：启动本地服务器预览网站。</li>\n<li><code>hexo clean</code>：清除缓存数据库和已生成的静态文件。</li>\n<li><code>hexo deploy</code> &#x2F; <code>hexo d</code>：将网站部署到远程服务器或仓库。</li>\n</ul>\n<p>在继续下一步之前，建议在本地通过 <code>hexo server</code> 验证博客能正常运行，默认会看到 Hexo 初始化生成的示例页面。</p>\n<h2 id=\"使用并自定义-Hexo-的-Aurora-主题\"><a href=\"#使用并自定义-Hexo-的-Aurora-主题\" class=\"headerlink\" title=\"使用并自定义 Hexo 的 Aurora 主题\"></a>使用并自定义 Hexo 的 Aurora 主题</h2><p>Hexo 默认提供简单的主题，但我们可以安装更加美观强大的主题。本教程选择 <strong>Aurora</strong> 主题，它是由开发者 <em>TriDiamond</em> 开发的一个现代炫酷的 Hexo 主题，具有未来感的渐变配色和丰富的功能。下面将介绍 Aurora 主题的安装和定制。</p>\n<h3 id=\"安装-Aurora-主题\"><a href=\"#安装-Aurora-主题\" class=\"headerlink\" title=\"安装 Aurora 主题\"></a>安装 Aurora 主题</h3><p>在 Hexo 博客根目录执行以下命令，通过 npm 安装 Aurora 主题及其依赖：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 Aurora 主题</span></span><br><span class=\"line\">npm install hexo-theme-aurora --save</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 若主题使用了 Pug 模版和 Stylus 样式，需安装渲染器（Aurora 主题需要）</span></span><br><span class=\"line\">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，Hexo 会将主题包存放在项目的 <code>node_modules/hexo-theme-aurora</code> 目录下。接着需要将主题配置文件复制出来：进入 <code>node_modules/hexo-theme-aurora</code> 目录，复制其中的 <code>_config.yml</code> 文件到博客根目录，并重命名为 <code>_config.aurora.yml</code>。至此，Hexo 会同时加载两个配置文件：<code>_config.yml</code> 是站点全局配置，而 <code>_config.aurora.yml</code> 则是主题专用配置。</p>\n<p>接下来，打开站点配置文件 <code>_config.yml</code>，需要修改几项以启用新主题并优化配置：</p>\n<p><strong>指定主题名称：</strong> 在 <code>_config.yml</code> 中找到 <code>theme</code> 参数，将其值设置为 <code>aurora</code>（注意大小写需与主题文件夹名一致）。例如：</p>\n  <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">aurora</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>配置站点 URL 和链接格式：</strong> 设置站点的 <code>url</code> 为博客网址（如使用 GitHub Pages，填入 <code>https://用户名.github.io</code>），并将 <code>permalink</code> 设置为自定义的永久链接格式，例如 <code>/post/:title.html</code>。这样生成的文章链接以标题加“.html”结尾，便于 SEO 优化和去除日期路径。</p>\n  <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"string\">https://yourusername.github.io</span>   <span class=\"comment\"># 替换为你的博客地址或自定义域名</span></span><br><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">/post/:title.html</span></span><br></pre></td></tr></table></figure>\n\n<p>  上述配置将文章发布路径设为 <strong>&#x2F;post&#x2F;标题.html</strong> 的形式，没有日期等冗余信息，更加简洁利于搜索引擎收录。</p>\n<p><strong>启用 Prism.js 代码高亮：</strong> Aurora 主题默认集成了 Prism.js 高亮方案。为避免与 Hexo 自带的 Highlight.js 冲突，我们需要关闭 Hexo 内置高亮并开启 Prism.js。在 <code>_config.yml</code> 中找到 <code>highlight</code> 配置，将其 <code>enable</code> 设为 false；然后启用 <code>prismjs</code> 并设置其 <code>enable</code> 为 true，<code>preprocess</code> 为 false：</p>\n  <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">highlight:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">line_number:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># ...（省略其他 highlight 设置）</span></span><br><span class=\"line\"><span class=\"attr\">prismjs:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">preprocess:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">line_number:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>  以上设置会关闭 Hexo 默认的代码高亮，转而使用 Prism.js 实现代码语法高亮。确保已安装所需渲染器（Hexo 5.x 起内置了 Prism.js 支持，无需额外插件，以上配置即可生效）。</p>\n<p><strong>其他基础配置：</strong> 根据需要修改站点标题、副标题、作者等信息，以及语言、时区等参数。在 <code>_config.yml</code> 开头的 <code>title</code>, <code>subtitle</code>, <code>author</code>, <code>language</code> 等字段填入合适的值（例如 language 设置为 <code>zh-CN</code>）。</p>\n<p>完成以上修改后，保存 <code>_config.yml</code>。此时站点的全局配置已更新，主题已经指定为 Aurora。接下来需要根据 Aurora 主题的文档，自定义其主题配置文件 <code>_config.aurora.yml</code> 以调整博客外观和功能。</p>\n<h3 id=\"配置-Aurora-主题样式与布局\"><a href=\"#配置-Aurora-主题样式与布局\" class=\"headerlink\" title=\"配置 Aurora 主题样式与布局\"></a>配置 Aurora 主题样式与布局</h3><p>打开博客根目录下的 <code>_config.aurora.yml</code>（刚从主题包复制的文件），里面包含了丰富的主题可定制项。我们将常用的几个配置分类说明：</p>\n<p><strong>站点信息：</strong> <code>site</code> 部分可配置博客副标题、作者昵称、站点描述、语言、Logo 和头像等。比如设置副标题和昵称：</p>\n  <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">site:</span></span><br><span class=\"line\">  <span class=\"attr\">subtitle:</span> <span class=\"string\">&#x27;我的技术博客&#x27;</span>   <span class=\"comment\"># 博客主标题后显示的副标题</span></span><br><span class=\"line\">  <span class=\"attr\">author:</span> <span class=\"string\">&#x27;张三&#x27;</span>           <span class=\"comment\"># 作者名称</span></span><br><span class=\"line\">  <span class=\"attr\">nick:</span> <span class=\"string\">&#x27;三三&#x27;</span>            <span class=\"comment\"># 昵称，将显示在侧边栏头像下方</span></span><br><span class=\"line\">  <span class=\"attr\">language:</span> <span class=\"string\">&#x27;cn&#x27;</span>          <span class=\"comment\"># 站点主要语言，可选 cn/en 等</span></span><br><span class=\"line\">  <span class=\"attr\">logo:</span> <span class=\"string\">https://...</span>       <span class=\"comment\"># 导航栏 Logo 图片链接</span></span><br><span class=\"line\">  <span class=\"attr\">avatar:</span> <span class=\"string\">https://...</span>     <span class=\"comment\"># 侧边栏头像图片链接</span></span><br></pre></td></tr></table></figure>\n\n<p>  还可以设置备案信息（中国大陆用户）<code>beian</code> 等字段。</p>\n<p><strong>导航菜单：</strong> <code>menu</code> 部分定义导航栏菜单结构，包括内置页面（关于、标签、归档等）及自定义链接。例如，Aurora 主题默认提供了 <code>About</code>（关于页面）、<code>Tags</code>（标签）、<code>Archives</code>（归档）等菜单项，可以通过布尔值控制其显示：</p>\n  <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">About:</span> <span class=\"literal\">true</span>      <span class=\"comment\"># 显示关于页面链接（需有 /page/about 页面）</span></span><br><span class=\"line\">  <span class=\"attr\">Tags:</span> <span class=\"literal\">true</span>       <span class=\"comment\"># 显示标签云页面链接</span></span><br><span class=\"line\">  <span class=\"attr\">Archives:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># 显示归档页面链接</span></span><br><span class=\"line\">  <span class=\"comment\"># 自定义外部链接示例：</span></span><br><span class=\"line\">  <span class=\"attr\">my-project:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">&#x27;项目&#x27;</span> </span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">&#x27;https://github.com/yourname/project&#x27;</span>  <span class=\"comment\"># 指向外部链接</span></span><br></pre></td></tr></table></figure>\n\n<p>  若要新增单页如“关于我”或“留言板”，可以先用 <code>hexo new page about</code> 命令创建页面，然后在菜单配置中启用 About 并指向 <code>/page/about</code> 路径即可。多级下拉菜单也可按文档格式在 <code>menu</code> 下嵌套 children 项配置。通过配置导航菜单，您可以自由定制顶部导航栏的栏目及其链接。</p>\n<p><strong>主题外观：</strong> <code>theme</code> 部分包含外观样式相关设置，比如深色模式开关、首页的特色内容、渐变色配置等：</p>\n  <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span></span><br><span class=\"line\">  <span class=\"attr\">dark_mode:</span> <span class=\"string\">auto</span>         <span class=\"comment\"># 深色模式（true 开启暗色，false 强制亮色，auto 跟随系统）</span></span><br><span class=\"line\">  <span class=\"attr\">profile_shape:</span> <span class=\"string\">diamond</span>  <span class=\"comment\"># 头像样式：支持 circle（圆形）、diamond（菱形）、rounded（圆角方形）</span></span><br><span class=\"line\">  <span class=\"attr\">feature:</span> <span class=\"literal\">true</span>           <span class=\"comment\"># 是否启用首页顶部的精选文章轮播/幻灯</span></span><br><span class=\"line\">  <span class=\"attr\">gradient:</span></span><br><span class=\"line\">    <span class=\"attr\">color_1:</span> <span class=\"string\">&#x27;#24c6dc&#x27;</span>    <span class=\"comment\"># 站点主题渐变的起始颜色</span></span><br><span class=\"line\">    <span class=\"attr\">color_2:</span> <span class=\"string\">&#x27;#5433ff&#x27;</span>    <span class=\"comment\"># 渐变过渡颜色</span></span><br><span class=\"line\">    <span class=\"attr\">color_3:</span> <span class=\"string\">&#x27;#ff0099&#x27;</span>    <span class=\"comment\"># 渐变结束颜色</span></span><br></pre></td></tr></table></figure>\n\n<p>  通过调整这些配置，可以改变站点的配色风格和一些模块显示效果。例如将 <code>dark_mode</code> 设为 <code>true</code> 可默认开启深色主题。</p>\n<p><strong>文章页面与插件：</strong> Aurora 支持多种评论插件和小工具。例如 <code>gitalk</code> 和 <code>valine</code> 评论、不蒜子访客统计、文章复制内容保护等，都在 <code>_config.aurora.yml</code> 的 <code>plugins</code> 部分配置。例如启用 Gitalk 评论，需要提供 GitHub OAuth 的 <code>clientID</code>、<code>clientSecret</code>、仓库名和管理员用户名等；或者将 <code>valine.enable</code> 设为 true 并填入 LeanCloud 的 appId&#x2F;appKey 来使用无后端评论系统。根据需要，参考官方文档填写对应配置即可启用相关插件。</p>\n<p>配置完成后，保存 <code>_config.aurora.yml</code>。建议重新运行 <code>hexo clean &amp;&amp; hexo server</code> 查看本地效果，检查导航栏菜单、首页布局、文章页元素是否符合预期。如果某些修改未生效，确保已正确修改对应配置文件且重启了本地服务。</p>\n<p>Aurora 主题的首页采样界面（夜间模式）。顶部导航栏含有首页、关于、归档等菜单，右上角提供了深色模式和多语言切换按钮。页面主体采用卡片式布局，包含特色的<strong>渐变色块</strong>和文章列表，使博客呈现出现代杂志风格。</p>\n<p>Aurora 主题丰富的配置使我们无需修改代码即可完成大部分定制。如果需要更深入的自定义（例如修改某些页面的布局细节、增加额外的功能组件），可以在主题的源码中调整对应的模板或样式文件。不过一般来说，通过配置项已经足够满足常见需求。</p>\n<h2 id=\"实用的-Hexo-插件与扩展\"><a href=\"#实用的-Hexo-插件与扩展\" class=\"headerlink\" title=\"实用的 Hexo 插件与扩展\"></a>实用的 Hexo 插件与扩展</h2><p>Hexo 拥有强大的插件生态，可以通过安装插件来增强博客功能和优化体验。下面介绍几款常用且实用的 Hexo 插件及其配置方法，包括站点地图、SEO 优化、图床工具和代码高亮等方面。</p>\n<h3 id=\"网站地图生成插件\"><a href=\"#网站地图生成插件\" class=\"headerlink\" title=\"网站地图生成插件\"></a>网站地图生成插件</h3><p><strong>站点地图（Sitemap）</strong> 有助于搜索引擎抓取您的博客页面。Hexo 官方提供了 <code>hexo-generator-sitemap</code> 插件，可以自动根据站点内容生成 <code>sitemap.xml</code> 文件。使用方法：</p>\n<ol>\n<li><p>安装插件：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在站点 <code>_config.yml</code> 中添加配置指定站点地图文件路径：</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sitemap:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">sitemap.xml</span></span><br></pre></td></tr></table></figure>\n\n<p> 添加上述配置后，重新生成博客会在 <code>public/</code> 目录下看到生成的 <code>sitemap.xml</code> 文件。</p>\n</li>\n</ol>\n<p>此外，更推荐使用 SEO 友好的站点地图插件 —— <strong>hexo-generator-seo-friendly-sitemap</strong>。该插件基于 WordPress SEO 的做法，将站点地图拆分成索引、文章、页面、分类、标签等多个 XML，更利于搜索引擎索引。使用方法与上类似：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-seo-friendly-sitemap --save</span><br></pre></td></tr></table></figure>\n\n<p>在 Hexo 配置文件中加入配置项：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sitemap:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">sitemap.xml</span>         <span class=\"comment\"># 主索引站点地图路径</span></span><br><span class=\"line\">  <span class=\"attr\">tag:</span> <span class=\"literal\">false</span>                <span class=\"comment\"># 是否包含标签页的站点地图（false 为不生成）</span></span><br><span class=\"line\">  <span class=\"attr\">category:</span> <span class=\"literal\">false</span>           <span class=\"comment\"># 是否包含分类页的站点地图（false 为不生成）</span></span><br></pre></td></tr></table></figure>\n\n<p>以上配置会让插件生成 <code>sitemap.xml</code> 索引文件，同时在站点根目录生成细分的 <code>post-sitemap.xml</code>、<code>page-sitemap.xml</code> 等。通常我们可以选择不让标签和分类页面出现在地图中（设置 <code>tag:false, category:false</code>），以提高主要内容页面的权重。部署后，记得将生成的 sitemap 提交到各大搜索引擎的站长平台，提升博客被索引的效率。</p>\n<h3 id=\"SEO-优化与友好链接\"><a href=\"#SEO-优化与友好链接\" class=\"headerlink\" title=\"SEO 优化与友好链接\"></a>SEO 优化与友好链接</h3><p>除了站点地图，还有一些插件与配置可以改善 SEO：</p>\n<p><strong>友好链接 (Permalink) 与 URL 优化：</strong> 默认情况下 Hexo 生成的链接包含发布日期等信息，不利于 URL 简洁。推荐将 <code>_config.yml</code> 中的 <code>permalink</code> 修改为如 <code>/post/:title/</code> 或 <code>/post/:title.html</code> 这样的格式（本教程前面已经设置）来去除日期。对于非英文标题文章，可以使用 <code>hexo-abbrlink</code> 或 <code>hexo-permalink-pinyin</code> 插件，将标题转为拼音或短编码，避免中文出现在 URL 中，提升链接可读性和稳定性。</p>\n<p><strong>nofollow 及站外链接优化：</strong> 可以安装过滤器插件如 <code>hexo-filter-nofollow</code>，为文章中的外部链接自动添加 <code>rel=&quot;nofollow&quot;</code> 属性，避免权重流失。安装方法：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-filter-nofollow --save</span><br></pre></td></tr></table></figure>\n\n<p>  然后在 <code>_config.yml</code> 添加：</p>\n  <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">nofollow:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">field:</span> <span class=\"string\">site</span>   <span class=\"comment\"># 对全站生效（也可选 post 仅对文章内容生效）</span></span><br><span class=\"line\">  <span class=\"attr\">exclude:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;yourdomain.com&#x27;</span>  <span class=\"comment\"># 排除自己域名等不需要处理的域名</span></span><br></pre></td></tr></table></figure>\n\n<p>  这样，所有通向站外的链接都会添加上 nofollow，以优化 SEO 表现。</p>\n<h3 id=\"图床插件与图片管理\"><a href=\"#图床插件与图片管理\" class=\"headerlink\" title=\"图床插件与图片管理\"></a>图床插件与图片管理</h3><p>在博客文章中插入图片是常见需求，但如果将图片直接放在项目仓库中，可能导致仓库体积增大，而且国内访问 GitHub Pages 上的图片速度较慢。为此，很多博主选择使用<strong>图床</strong>来存储图片，即将图片上传到第三方存储并引用其外链，这样既减小博客仓库体积，又能利用 CDN 加速图片加载。</p>\n<p>实现图床有多种方式：</p>\n<p><strong>外部图床工具 PicGo：</strong> PicGo 是一款开源的图片上传工具，支持将图片上传到 SM.MS、微博、七牛云、腾讯云 COS、阿里云 OSS、GitHub 等多个图床。我们可以在本地安装 PicGo，配置好图床（例如使用 GitHub 的一个仓库作为图床），然后在写文章时通过 PicGo 快速上传图片并得到外链 URL，将该 URL 插入 Markdown 中。常用的方案是 <strong>PicGo + GitHub</strong>：新建一个公开的 GitHub 仓库专门存放图片，通过 PicGo 将图片上传到该仓库的 Issue 或直接存储在仓库中，然后引用 <code>raw.githubusercontent.com</code> 的链接。这样图片将由 GitHub 的全球 CDN 分发，保证加载速度。同时利用 GitHub 免费存储避免流量费用。</p>\n<p><strong>Hexo 插件集成：</strong> 如果希望在 Hexo 写作流程中更加自动化，也可以使用 Hexo 插件来处理图片。例如 <code>hexo-asset-image</code> 插件可以在文章生成时自动处理本地资源路径，或者使用 <code>hexo-qiniu-sync</code> 等插件将本地图片同步上传到云存储。也有用户通过 Hexo 引入自定义脚本，在每次部署前自动执行 PicGo 上传图片的命令。这些方案可以根据个人需求选择。</p>\n<p>值得一提的是，Hexo 支持<strong>文章资源文件夹</strong>功能（Post Asset Folder）。在 <code>_config.yml</code> 中设置 <code>post_asset_folder: true</code> 后，每次 <code>hexo new</code> 新文章都会创建与之同名的资源文件夹，可将文章图片放入其中，然后通过 <code>&#123;% asset_img 文件名 描述 %&#125;</code> 标签或开启 <code>marked.asset</code> 选项来引用。Hexo 5.0+ 提供了 <code>marked: postAsset: true</code> 的选项，允许 Markdown 中直接用 <code>![](image.png)</code> 引用资源文件夹内的图片。如果博客部署在 GitHub Pages 上且没有自定义加速，对小型博客来说也可以直接使用这种本地方式管理图片。</p>\n<p>总之，推荐使用合适的图床方案来管理博客中的多媒体资源，以提升页面加载速度和内容管理便捷性。</p>\n<h3 id=\"代码高亮与-Markdown-扩展\"><a href=\"#代码高亮与-Markdown-扩展\" class=\"headerlink\" title=\"代码高亮与 Markdown 扩展\"></a>代码高亮与 Markdown 扩展</h3><p>Hexo 对 Markdown 的渲染和代码高亮有多种支持：</p>\n<p><strong>代码高亮插件：</strong> 如果不使用主题内置的 Prism.js，也可以考虑安装官方提供的 <code>hexo-prism-plugin</code> 来支持 Prism 高亮，或者使用其他高亮插件。不过目前 Hexo 6.x 版本自带对 Prism 的支持，只需配置即可（正如前文所示关闭 highlight 并开启 prismjs）。在确保配置正确的前提下，无需额外插件即可获得丰富的代码高亮样式。</p>\n<p><strong>渲染引擎扩展：</strong> Hexo 默认使用 <code>hexo-renderer-marked</code> 解析 Markdown，你也可以改用 <code>hexo-renderer-markdown-it</code> 等以支持更多 Markdown 语法扩展。如果需要在文章中书写数学公式，可以安装 <code>hexo-renderer-kramed</code> 或使用 MathJax（Aurora 主题本身对 MathJax 是支持的，在文章中用 <code>$$</code> 包围公式即可）。</p>\n<p><strong>文章搜索与索引：</strong> Hexo 还可以通过插件生成站内搜索数据，例如 <code>hexo-generator-searchdb</code> 可以生成 JSON 索引文件供前端搜索使用，或使用第三方服务的搜索插件（Algolia 等）。如果希望添加全文搜索功能，可以安装对应的插件并根据其文档进行配置。</p>\n<p>总结来说，Hexo 插件生态非常丰富，包括 SEO、评论、分析、站内搜索、RSS feed、自动备份部署等方方面面。挑选适合自己需求的插件，通过 npm 安装并在 <code>_config.yml</code> 中配置启用即可。在安装新插件后，别忘了重新启动本地服务器测试其功能是否正常运行。</p>\n<h2 id=\"Hexo-部署到-GitHub-Pages-与-Cloudflare-加速\"><a href=\"#Hexo-部署到-GitHub-Pages-与-Cloudflare-加速\" class=\"headerlink\" title=\"Hexo 部署到 GitHub Pages 与 Cloudflare 加速\"></a>Hexo 部署到 GitHub Pages 与 Cloudflare 加速</h2><p>搭建好博客并丰富功能后，就需要将其发布到互联网。常见且免费的方案是利用 <strong>GitHub Pages</strong> 托管静态网站，然后使用 <strong>Cloudflare</strong> 做自定义域名解析和 CDN 加速。这一节将介绍如何将 Hexo 站点部署到 GitHub Pages，以及如何通过 Cloudflare 配置自定义域名与 CDN。</p>\n<h3 id=\"部署到-GitHub-Pages\"><a href=\"#部署到-GitHub-Pages\" class=\"headerlink\" title=\"部署到 GitHub Pages\"></a>部署到 GitHub Pages</h3><p>GitHub Pages 分为<strong>用户&#x2F;组织主页</strong>和<strong>项目主页</strong>两类。这里以用户主页为例（仓库命名为 <code>username.github.io</code>）。部署主要有两种方式：</p>\n<p><strong>方式一|使用 Hexo 一键部署：</strong><br>这是较传统的方法。需要先安装部署插件并配置仓库地址，然后使用 Hexo 命令将生成的静态文件推送到 GitHub。</p>\n<p>  <strong>安装部署插件：</strong> Hexo 官方提供了 <code>hexo-deployer-git</code> 插件，可将生成的文件通过 Git 推送。在博客目录执行：<br>     <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p>\n<p>  <strong>配置部署信息：</strong> 打开站点 <code>_config.yml</code>，找到 <code>deploy</code> 部分，按照插件文档填写 GitHub 仓库信息：<br>     <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">git@github.com:&lt;YourUsername&gt;/&lt;YourUsername&gt;.github.io.git</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">main</span></span><br></pre></td></tr></table></figure><br>     <code>repo</code> 可以使用 SSH 地址或 HTTPS 地址，<code>branch</code> 一般为 <code>main</code>（或你指定的发布分支，如 <code>gh-pages</code>）。上述示例中假设使用用户名仓库做站点，直接部署到 <code>main</code> 分支。<br>  <strong>执行部署命令：</strong> 确保已经 <code>hexo generate</code> 生成了最新静态文件，然后运行：<br>     <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure><br>     Hexo 将自动清理旧文件，打包生成新静态站点并通过 Git 将 <code>public</code> 文件夹内容提交到配置的仓库分支。完成后，访问 <code>https://&lt;YourUsername&gt;.github.io</code> 就可以看到博客上线了。</p>\n<p>  <strong>提示：</strong> 使用 Hexo deploy 部署时，<code>public/</code> 文件夹通常不需要纳入版本控制（在 <code>.gitignore</code> 中已忽略），Hexo 会在内部生成临时 repo 推送。 若部署过程中遇到权限问题，请检查 GitHub 仓库 URL、分支是否正确，以及本地是否配置了 SSH 密钥或凭证。</p>\n<p><strong>方式二|使用 GitHub Actions 自动部署：</strong><br>这是 GitHub 官方推荐的方法。其思路是将 Hexo 源码推送到一个仓库，然后利用 GitHub Actions CI 在每次推送时自动安装 Hexo、生成静态文件并发布到 GitHub Pages。</p>\n<p>  简要步骤如下：</p>\n<ol>\n<li>将整个 Hexo 博客工程（包括 source、themes 等）推送到一个 GitHub 仓库的主分支，例如 <code>blog-source</code> 仓库。确保 <code>.gitignore</code> 忽略了 <code>node_modules</code> 和 <code>public</code> 等无需上传的目录。</li>\n<li>在该仓库的 <strong>Settings &gt; Pages</strong> 中，将 Pages 的部署来源设置为 <strong>GitHub Actions</strong>。</li>\n<li>添加 GitHub Actions 配置文件：在仓库中创建 <code>.github/workflows/pages.yml</code>，编写工作流配置让 GitHub Actions 在每次推送时执行构建。可以使用 Hexo 官方文档提供的参考配置。主要步骤包括：<ul>\n<li>使用 <code>actions/checkout</code> 检出源码。</li>\n<li>使用 <code>actions/setup-node</code> 安装指定版本 Node.js 环境（确保版本&gt;&#x3D; Node 14或16以上，与本地一致）。</li>\n<li><code>npm install</code> 安装依赖。</li>\n<li>执行 <code>hexo generate</code> 或 <code>npm run build</code> 构建静态文件。</li>\n<li>使用 <code>actions/upload-pages-artifact</code> 和 <code>actions/deploy-pages</code> 将 <code>public</code> 文件夹内容部署到 GitHub Pages。</li>\n</ul>\n</li>\n<li>保存配置后，每次推送内容到主分支，GitHub Actions 会自动触发部署流程。部署完成后，可在 GitHub Pages 上访问博客。</li>\n</ol>\n<p>  使用 GitHub Actions 部署的好处是无需本地运行生成命令，云端自动构建，且适用于私有仓库。但相对配置稍复杂。对于个人博客，若更新频率不高，使用 Hexo 自带部署也完全可行。</p>\n<p>无论使用哪种方式，将博客部署到 <code>username.github.io</code> 后，如果不绑定自定义域名，可以直接通过 <code>https://username.github.io</code> 访问。如果要绑定自己的域名，需要在仓库的 Pages 设置中配置域名，并在 Hexo 项目中添加一个 <code>CNAME</code> 文件。</p>\n<p><strong>配置自定义域名（GitHub Pages）：</strong> 在博客工程的 <code>source</code> 目录下新建一个文件 <code>CNAME</code>（无扩展名），内容写上您的自定义域名，例如 <code>blog.example.com</code>。这样每次部署时，GitHub Pages 都会识别并配置该域名。如果已经通过 GitHub 页面设置添加过域名，也会在仓库根产生该文件。注意使用 Actions 部署的，需要确保构建生成的 <code>public</code> 中也包含此 <code>CNAME</code> 文件。</p>\n<h3 id=\"使用-Cloudflare-进行-DNS-和-CDN-加速\"><a href=\"#使用-Cloudflare-进行-DNS-和-CDN-加速\" class=\"headerlink\" title=\"使用 Cloudflare 进行 DNS 和 CDN 加速\"></a>使用 Cloudflare 进行 DNS 和 CDN 加速</h3><p>GitHub Pages 虽然提供了免费的托管和 HTTPS，但在全球节点和访问速度方面有所限制。Cloudflare 提供<strong>免费的 DNS 解析和 CDN 加速服务</strong>，可以很方便地与 GitHub Pages 结合，让您自定义的域名通过 Cloudflare 的全球节点来分发，从而提高访问速度。</p>\n<p>基本设置步骤如下：</p>\n<ol>\n<li>将域名接入 Cloudflare：在 Cloudflare 上添加您的域名，按照向导把域名的 DNS 服务器（Nameservers）切换为 Cloudflare 提供的地址。这样域名的解析将由 Cloudflare 接管。</li>\n<li>配置 DNS 记录指向 GitHub Pages：在 Cloudflare DNS 管理页面，为您的自定义域添加记录：<br><strong>CNAME 记录：</strong> 如果您的博客使用二级域名（如 <code>blog.example.com</code>），推荐添加一条 CNAME 记录，主机名填 <code>blog</code>，指向 <code>username.github.io</code>。这样 Cloudflare 会将 <code>blog.example.com</code> 的请求转发到 GitHub Pages。（GitHub 官方建议使用 CNAME 方法，这样将来 GitHub Pages 服务器 IP 变更时无需更新配置。）<br><strong>A 记录：</strong> 如果使用裸域（根域名），可以添加 GitHub Pages 的 A 记录。GitHub Pages 当前的服务器 IP 有四个，可添加四条 A 记录指向 <code>185.199.108.153</code>、<code>185.199.109.153</code>、<code>185.199.110.153</code>、<code>185.199.111.153</code>。但是注意裸域直接设 A 记录在启用 Cloudflare Proxy 时可能遇到证书问题，一般更推荐将裸域通过 CNAME Flattening 指向 GitHub 提供的用户名域名。</li>\n<li>验证域名配置：完成 DNS 设置并在 GitHub 仓库添加了 CNAME 文件后，等待一段时间让解析生效。通常数分钟到数小时内即可生效（Cloudflare DNS 十分快速）。生效后，通过浏览器访问您的自定义域名，应能看到博客正常显示。如果 ping 该域名，会发现解析到的 IP 已经是 Cloudflare 的节点 IP 而非 GitHub 的服务器。</li>\n</ol>\n<p>开启 Cloudflare 加速和 HTTPS：确保 Cloudflare 对该域名的代理状态是启用（橙色小云图标）。Cloudflare将自动为你的域名签发通配符 SSL 证书，实现 HTTPS 访问。在 <strong>SSL&#x2F;TLS</strong> 设置中，将加密模式设为 “Full” 或 “Full (strict)” 以确保 Cloudflare 和 GitHub Pages 之间也使用 HTTPS 连接（GitHub Pages 本身提供 HTTPS）。另外，可以在 <strong>Edge Certificates</strong> 中开启 “Always Use HTTPS”，确保所有访问自动跳转 HTTPS。</p>\n<p>Cloudflare CDN 会缓存静态内容并通过距离用户最近的节点提供访问，加速效果明显。经配置后，通过 Cloudflare 代理的博客在国内外访问速度都会有提升。同时 Cloudflare 提供流量分析、防火墙、安全防护等附加功能，可为博客提供基础的 DDoS 防护和访问统计。</p>\n<p><strong>注意：https 设置问题</strong> – 当使用 Cloudflare 代理后，不要在 GitHub Pages 设置中勾选 “Enforce HTTPS”（强制 HTTPS），因为 Cloudflare 接管了证书颁发。Cloudflare 会自动处理 HTTPS，所以保持 GitHub Pages 那边的 Enforce HTTPS 关闭即可。访问者请求 Cloudflare 时用 HTTPS，Cloudflare 再与 GitHub 通信获取内容。</p>\n<p>至此，我们的 Hexo 博客已经通过 GitHub Pages 部署，并经由 Cloudflare 的 CDN 提供全球加速访问和 DNS 解析。接下来，我们来回顾本次搭建所使用的主要技术栈，并给出完整的部署流程示例。</p>\n<h2 id=\"涉及的主要技术栈\"><a href=\"#涉及的主要技术栈\" class=\"headerlink\" title=\"涉及的主要技术栈\"></a>涉及的主要技术栈</h2><p>在搭建和部署 Hexo 博客的过程中，我们实际运用了多种工具和技术服务，以下是本方案涉及的主要技术栈及其作用：</p>\n<ul>\n<li><strong>Node.js &amp; npm&#x2F;yarn：</strong> Hexo 基于 Node.js 开发，使用 npm 或 yarn 来安装 Hexo、本地服务器和各类插件包。Node.js 提供了运行环境，使我们可以使用 Hexo CLI 命令来生成博客。</li>\n<li><strong>Markdown：</strong> 博文内容使用 Markdown 格式编写，Hexo 内置支持将 Markdown 渲染为 HTML 静态页面。Markdown 语法简单高效，适合写作技术文章。</li>\n<li><strong>Hexo 框架：</strong> 静态网站生成框架，负责解析 Markdown、应用主题模板、生成完整的静态站点文件。</li>\n<li><strong>Hexo 插件系统：</strong> 通过 Hexo 丰富的插件，可以实现 SEO 优化（站点地图、友好链接等）、代码高亮、评论系统集成、内容搜索、图片处理等扩展。</li>\n<li><strong>Git &amp; GitHub：</strong> Git 用于版本控制博客源码，GitHub 托管代码仓库和提供 Pages 服务。我们将博客部署在 GitHub Pages（免费、安全、稳定），并使用 Git 进行部署发布。</li>\n<li><strong>GitHub Actions：</strong>（可选）CI&#x2F;CD 工具，用于自动化部署。如果配置了 Actions，每次更新博客内容 push 到仓库后都会自动构建发布，省去手动部署步骤。</li>\n<li><strong>GitHub Pages：</strong> 静态网站托管服务，直接从仓库中读取文件发布网站。我们利用它存放生成的博客页面，默认提供一个 <code>github.io</code> 二级域名访问。</li>\n<li><strong>Cloudflare DNS&#x2F;CDN：</strong> Cloudflare 提供全球高速的 DNS 解析，将我们自定义域名解析到 GitHub Pages；同时作为反向代理和 CDN，加速静态内容分发。通过 Cloudflare，我们的博客可以使用自定义独立域名，并享受免费 CDN 加速和基础的安全防护。</li>\n<li><strong>前端技术：</strong> 生成的页面基于 HTML&#x2F;CSS&#x2F;JavaScript。在 Aurora 主题中，大量使用了现代前端技术（如 Vue.js 实现 SPA 无刷新切换等、Tailwind CSS 等），这些技术框架由主题内部实现，我们在使用时无需特别处理，但了解其存在有助于定制和排错。</li>\n</ul>\n<p>上述各部分相互配合，构成了完整的个人博客系统：编写文章（Markdown）→ 使用 Hexo 生成静态站点（Node.js 环境）→ 部署到 GitHub Pages（Git 管理代码）→ 通过 Cloudflare 配置域名与加速（DNS&#x2F;CDN 服务）。</p>\n<p>接下来，我们将以<strong>Aurora 主题 + GitHub Pages + Cloudflare</strong>这一组合为例，完整演示从初始化到上线的过程，帮助读者理清实战操作步骤。</p>\n<h2 id=\"实操示例：Aurora-主题-GitHub-Pages-Cloudflare-部署\"><a href=\"#实操示例：Aurora-主题-GitHub-Pages-Cloudflare-部署\" class=\"headerlink\" title=\"实操示例：Aurora 主题 + GitHub Pages + Cloudflare 部署\"></a>实操示例：Aurora 主题 + GitHub Pages + Cloudflare 部署</h2><p>本节将把前文介绍的各环节串联起来，演示如何从零开始搭建一个使用 Aurora 主题的 Hexo 博客，并部署到 GitHub Pages，通过 Cloudflare 使用自定义域名加速访问。假设读者已经在本地安装好了 Node.js、npm 和 Git，并拥有一个 GitHub 账号和购买好的域名。</p>\n<p><strong>步骤1 – 初始化 Hexo 项目：</strong></p>\n<p>在本地新建一个文件夹（例如 <code>my-blog</code>），进入该目录，在命令行中执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br><span class=\"line\">hexo init .</span><br></pre></td></tr></table></figure>\n\n<p>这将初始化当前文件夹为 Hexo 博客，安装所需依赖并生成基础结构。进入目录后，打开 <code>_config.yml</code>，设置基本信息如 <code>title</code>（站点名称），<code>author</code>，<code>language: zh-CN</code> 等。</p>\n<p><strong>步骤2 – 安装并配置 Aurora 主题：</strong></p>\n<p>执行以下命令安装 Aurora 主题及其所需渲染插件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-theme-aurora --save</span><br><span class=\"line\">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，将 <code>node_modules/hexo-theme-aurora/_config.yml</code> 复制到项目根目录，重命名为 <code>_config.aurora.yml</code>。然后编辑站点配置 <code>_config.yml</code>：</p>\n<ul>\n<li>设置 <code>theme: aurora</code>以启用 Aurora 主题。</li>\n<li>设置 <code>url</code> 为准备使用的域名（例如 <code>https://blog.example.com</code>），<code>permalink: /post/:title.html</code> 以优化链接。</li>\n<li>关闭 highlight 并启用 prismjs，用于代码高亮。</li>\n<li>（可选）开启 <code>post_asset_folder: true</code> 方便管理文章图片。</li>\n</ul>\n<p>保存后，打开 <code>_config.aurora.yml</code>，根据自己的博客信息调整配置：</p>\n<ul>\n<li>修改 <code>subtitle</code>, <code>author</code>, <code>avatar</code>, <code>logo</code> 等站点元素。</li>\n<li>配置导航菜单：如果希望有“关于我”页面，先运行 <code>hexo new page about</code> 创建，再将 <code>_config.aurora.yml</code> 中 <code>menu.About</code> 设置为 true。</li>\n<li>设置评论系统（如提供 Gitalk 的 ID&#x2F;Secret 和 repo 名）或关闭评论。</li>\n<li>调整主题颜色风格、是否开启暗色模式等选项。</li>\n</ul>\n<p>完成配置后，运行 <code>hexo clean &amp;&amp; hexo s</code>，打开浏览器预览 <code>http://localhost:4000</code>，应该可以看到应用 Aurora 主题的博客首页。</p>\n<p>Aurora 主题的文章详情页示例。该主题在文章页面提供了丰富的元素，包括面包屑导航、标题下的文章元信息（分类、标签、发布时间、字数统计、阅读时长、浏览量等），侧边栏展示作者信息和最新评论挂件等。绚丽的渐变配色与暗黑风格为读者带来良好的阅读体验。</p>\n<p><strong>步骤3 – 提交源码到 GitHub 仓库：</strong></p>\n<p>在 GitHub 上新建一个仓库（建议私有仓库，用于存放 Hexo 源码）。本例中我们创建仓库 <code>hexo-source</code>。在本地博客目录初始化 Git 并推送：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git remote add origin git@github.com:&lt;YourUsername&gt;/hexo-source.git</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;Initial blog with Hexo and Aurora&quot;</span></span><br><span class=\"line\">git push -u origin main</span><br></pre></td></tr></table></figure>\n\n<p>确保 <code>.gitignore</code> 已排除 <code>node_modules</code> 和 <code>public</code> 目录，然后将所有源文件上传。这样，我们的博客源文件就有了版本备份。</p>\n<p><strong>步骤4 – 配置 GitHub Pages 仓库：</strong></p>\n<p>在 GitHub 上再新建一个仓库用于承载生成的静态页面。这里以用户主页为例，创建仓库名为 <code>&lt;YourUsername&gt;.github.io</code>（替换为你的 GitHub 用户名）。如果偏好放在项目仓库，可取名如 <code>blog</code>，但需用子路径访问。本文以用户主页方式继续。</p>\n<p>在 Hexo 项目配置 <code>_config.yml</code> 中，添加部署信息：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">git@github.com:&lt;YourUsername&gt;/&lt;YourUsername&gt;.github.io.git</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">main</span>   <span class=\"comment\"># GitHub Pages 默认使用 main 发布用户主页</span></span><br></pre></td></tr></table></figure>\n\n<p>安装部署插件并执行部署：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br><span class=\"line\">hexo clean &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>Hexo 将生成 <code>public</code> 文件并推送到指定仓库。部署成功后，几秒钟后访问 <code>https://&lt;YourUsername&gt;.github.io</code> 即可看到博客上线（使用 GitHub 提供的域名）。</p>\n<p><strong>步骤5 – 绑定自定义域名：</strong></p>\n<p>假设我们有域名 <code>example.com</code>，并希望使用二级域名 <code>blog.example.com</code> 作为博客地址。首先在 <code>hexo-source</code> 工程的 <code>source</code> 目录下创建文件 <code>CNAME</code>，内容为 <code>blog.example.com</code>。提交并部署后，GitHub Pages 会配置该自定义域。</p>\n<p>然后登录域名注册商，将域名的 DNS 服务器指向 Cloudflare（提前在 Cloudflare 添加站点，获取分配的 NS）。在 Cloudflare DNS 设置中添加如下记录：</p>\n<ul>\n<li>类型：CNAME</li>\n<li>名称：blog</li>\n<li>值：<code>&lt;YourUsername&gt;.github.io</code>（你的 GitHub Pages 默认域名）</li>\n<li>TTL：自动，代理状态：<strong>Proxied</strong> (开启云朵)。</li>\n</ul>\n<p>保存后，几分钟内 Cloudflare 会开始解析 <code>blog.example.com</code>。在 GitHub 仓库的 Pages 设置中，确认已经显示绑定域名且证书状态正常。</p>\n<p><strong>步骤6 – Cloudflare 配置优化：</strong></p>\n<p>在 Cloudflare 控制台，为你的站点做如下设置：</p>\n<ul>\n<li><strong>SSL&#x2F;TLS</strong> : 确保模式为 Full。开启 “Always Use HTTPS”，这样即使用户输入 http:&#x2F;&#x2F; 也会强制跳转到 https:&#x2F;&#x2F;。</li>\n<li><strong>Caching</strong> : 默认即可，无需特殊配置，Cloudflare 会缓存静态资源。可以根据需要设置缓存等级和有效期。博客内容更新后，可通过 Cloudflare 的 “Purge Cache” 清除缓存。</li>\n<li><strong>Firewall&#x2F;Security</strong> : 对于个人博客，可开启基础的 WAF 规则，比如 Bot Fight Mode 等，以防止恶意爬虫。一般静态博客不易受到攻击，但开启这些选项也无妨。</li>\n<li><strong>Page Rules</strong>  (可选): 如果希望所有子路径都开启缓存，可以添加 Page Rule 如 <code>*blog.example.com/*</code> 缓存级别 Cache Everything，不过对 Hexo 页面意义不大，因为默认 HTML 已经会缓存。保持默认“标准”即可，让 Cloudflare 针对静态资源（CSS&#x2F;JS&#x2F;图片等）缓存。</li>\n</ul>\n<p>完成后，访问 <code>https://blog.example.com</code>，应当可以正常打开博客。如果一切顺利，那么<strong>Hexo + Aurora + GitHub Pages + Cloudflare</strong>的部署就圆满完成了！🎉</p>\n<p>通过这个示例，我们验证了从本地搭建 Hexo 博客到线上部署的整个流程。回顾一下关键节点：</p>\n<ul>\n<li>Hexo 初始化与本地调试：<strong>保证博客在本地运行无误</strong>，内容和样式正确。</li>\n<li>Aurora 主题配置：按需调整<strong>主题外观和功能</strong>，使博客更加个性化。</li>\n<li>插件安装：加入必要的<strong>功能扩展</strong>（站点地图、评论、统计等）提升博客质量。</li>\n<li>GitHub Pages 部署：使用 Hexo 或 Actions <strong>将静态文件发布</strong>到 GitHub，享受免费的页面托管服务。</li>\n<li>Cloudflare 接入：配置<strong>DNS解析和 CDN</strong>，启用自定义域名和全球加速，让博客性能更上一层楼。</li>\n</ul>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>通过以上步骤，我们成功地搭建了一个自定义主题、美观高效的个人技术博客。从环境搭建、主题美化、功能扩展到部署优化，各环节相辅相成。Hexo 强调<strong>简洁快速</strong>，再结合 Aurora 这样强大的主题以及 Cloudflare 的加速能力，完全可以打造出体验优秀、易于维护的静态博客站点。希望本教程能够为你搭建自己的 Hexo 博客提供清晰的指引，欢迎你按照本文步骤实践，逐步摸索出适合自己需求的博客配置方案。现在，就开始写作并分享你的技术见解吧！ 😃</p>\n<p><strong>参考资料：</strong></p>\n<ul>\n<li>Hexo 官方文档：<a href=\"https://hexo.io/\">https://hexo.io/</a>（包含安装使用、插件列表等说明）  </li>\n<li>Aurora 主题官方仓库：<a href=\"https://github.com/auroral-ui/hexo-theme-aurora\">https://github.com/auroral-ui/hexo-theme-aurora</a>（提供主题文档和更新日志）  </li>\n<li>《Hexo 进行 SEO 优化的基本指南》  </li>\n<li>GitHub Pages 官方指南：<a href=\"https://docs.github.com/pages\">https://docs.github.com/pages</a>（介绍自定义域名等设置）  </li>\n<li>Cloudflare 官方博客关于 GitHub Pages 集成：<a href=\"https://blog.cloudflare.com/secure-and-fast-github-pages/\">https://blog.cloudflare.com/secure-and-fast-github-pages/</a>  </li>\n<li>作者 Fan223 的 Aurora 主题配置示例博客（对理解主题配置很有帮助）</li>\n</ul>\n","feature":true,"text":"Hexo 是一个基于 Node.js 的快速、高效的静态博客框架。通过 Hexo，我们可以使用 Markdown 编写文章，几秒钟内生成静态网页并部署到托管服务...","permalink":"/post/hexo-aurora","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"16 mins."},"categories":[{"name":"Tech","slug":"Tech","count":2,"path":"api/categories/Tech.json"}],"tags":[{"name":"hexo","slug":"hexo","count":1,"path":"api/tags/hexo.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Hexo-%E5%AE%89%E8%A3%85%E4%B8%8E%E5%88%9D%E5%A7%8B%E5%8C%96\"><span class=\"toc-text\">Hexo 安装与初始化</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E5%B9%B6%E8%87%AA%E5%AE%9A%E4%B9%89-Hexo-%E7%9A%84-Aurora-%E4%B8%BB%E9%A2%98\"><span class=\"toc-text\">使用并自定义 Hexo 的 Aurora 主题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85-Aurora-%E4%B8%BB%E9%A2%98\"><span class=\"toc-text\">安装 Aurora 主题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE-Aurora-%E4%B8%BB%E9%A2%98%E6%A0%B7%E5%BC%8F%E4%B8%8E%E5%B8%83%E5%B1%80\"><span class=\"toc-text\">配置 Aurora 主题样式与布局</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%94%A8%E7%9A%84-Hexo-%E6%8F%92%E4%BB%B6%E4%B8%8E%E6%89%A9%E5%B1%95\"><span class=\"toc-text\">实用的 Hexo 插件与扩展</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BD%91%E7%AB%99%E5%9C%B0%E5%9B%BE%E7%94%9F%E6%88%90%E6%8F%92%E4%BB%B6\"><span class=\"toc-text\">网站地图生成插件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SEO-%E4%BC%98%E5%8C%96%E4%B8%8E%E5%8F%8B%E5%A5%BD%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">SEO 优化与友好链接</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9B%BE%E5%BA%8A%E6%8F%92%E4%BB%B6%E4%B8%8E%E5%9B%BE%E7%89%87%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">图床插件与图片管理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE%E4%B8%8E-Markdown-%E6%89%A9%E5%B1%95\"><span class=\"toc-text\">代码高亮与 Markdown 扩展</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Hexo-%E9%83%A8%E7%BD%B2%E5%88%B0-GitHub-Pages-%E4%B8%8E-Cloudflare-%E5%8A%A0%E9%80%9F\"><span class=\"toc-text\">Hexo 部署到 GitHub Pages 与 Cloudflare 加速</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%83%A8%E7%BD%B2%E5%88%B0-GitHub-Pages\"><span class=\"toc-text\">部署到 GitHub Pages</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-Cloudflare-%E8%BF%9B%E8%A1%8C-DNS-%E5%92%8C-CDN-%E5%8A%A0%E9%80%9F\"><span class=\"toc-text\">使用 Cloudflare 进行 DNS 和 CDN 加速</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B6%89%E5%8F%8A%E7%9A%84%E4%B8%BB%E8%A6%81%E6%8A%80%E6%9C%AF%E6%A0%88\"><span class=\"toc-text\">涉及的主要技术栈</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E6%93%8D%E7%A4%BA%E4%BE%8B%EF%BC%9AAurora-%E4%B8%BB%E9%A2%98-GitHub-Pages-Cloudflare-%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">实操示例：Aurora 主题 + GitHub Pages + Cloudflare 部署</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%93%E8%AF%AD\"><span class=\"toc-text\">结语</span></a></li></ol>","author":{"name":"Rockway","slug":"blog-author","avatar":"images/3.jpg","link":"https://lingmafuture.github.io","description":"Think like an artist, code like an artisan! 像艺术家一样思考，像工匠一样编程！","socials":{}},"mapped":true,"hidden":false,"prev_post":{"title":"Transformer 架构详解（含 PyTorch 代码）","uid":"48a8ab6165265f9c75721ce750feca94","slug":"transformer","date":"2025-08-12T16:00:00.000Z","updated":"2025-08-15T13:12:02.102Z","comments":true,"path":"api/articles/transformer.json","keywords":"blog, technology, programming","cover":"https://raw.githubusercontent.com/LingmaFuture/lingmafuture.github.io/refs/heads/main/images/6.png","text":" 读者对象：已具备基本深度学习与 PyTorch 基础，希望系统掌握 Transformer 各模块设计与实现的工程师/学生。文章目标：从实现角度深入讲清楚每个...","permalink":"/post/transformer","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":2,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"code","slug":"code","count":2,"path":"api/tags/code.json"}],"author":{"name":"Rockway","slug":"blog-author","avatar":"images/3.jpg","link":"https://lingmafuture.github.io","description":"Think like an artist, code like an artisan! 像艺术家一样思考，像工匠一样编程！","socials":{}},"feature":true},"next_post":{"title":"信仰产品之前，先信仰世界","uid":"902841660a63024fb4af3ed99735d7aa","slug":"doit","date":"2025-06-30T16:00:00.000Z","updated":"2025-08-15T11:57:25.051Z","comments":true,"path":"api/articles/doit.json","keywords":"blog, technology, programming","cover":"https://raw.githubusercontent.com/LingmaFuture/lingmafuture.github.io/refs/heads/main/images/3.png","text":" “只要理论上可行，那它就一定可以实现。”——张一鸣“在一切真正开始之前，没有人相信那真的会发生。”——《三体》 当我们站在某个创意的门口，望着脑海中那个未曾落...","permalink":"/post/doit","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"Notes","slug":"Notes","count":2,"path":"api/categories/Notes.json"}],"tags":[{"name":"think","slug":"think","count":1,"path":"api/tags/think.json"}],"author":{"name":"Rockway","slug":"blog-author","avatar":"images/3.jpg","link":"https://lingmafuture.github.io","description":"Think like an artist, code like an artisan! 像艺术家一样思考，像工匠一样编程！","socials":{}},"feature":true}}